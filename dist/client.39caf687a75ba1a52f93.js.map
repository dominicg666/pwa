{"version":3,"sources":["webpack:///./src/components/Mask/mask.js","webpack:///./src/components/Mask/mask.scss","webpack:///./src/index.scss?54d5","webpack:///./src/components/Main/main.scss","webpack:///./src/classify.js","webpack:///./src/components/Main/main.scss?d896","webpack:///./src/components/App/contextProvider.js","webpack:///./src/constants/swMessageTypes.js","webpack:///./src/registerSW.js","webpack:///./src/components/Main/main.js","webpack:///./src/util/swUtils.js","webpack:///./src/drivers/adapter.js","webpack:///./src/components/App/app.js","webpack:///./src/components/Mask/mask.scss?8fcc","webpack:///./src/components/Routes/routes.js","webpack:///./src/index.scss","webpack:///./src/index.js","webpack:///./src/components/App/container.js","webpack:///./src/store.js","webpack:///./src/util/getDisplayName.js","webpack:///./src/components/Head/headProvider.js","webpack:///./src/components/App/useErrorBoundary.js"],"names":["Mask","Component","render","classes","dismiss","isActive","this","props","className","root_active","root","onClick","PropTypes","shape","string","func","bool","classify","defaultClasses","exports","___CSS_LOADER_API_IMPORT___","push","module","i","api","content","__esModule","default","options","locals","mergeClasses","args","Object","assign","WrappedComponent","restProps","finalClasses","getDisplayName","contextProviders","Adapters","WindowSizeContextProvider","ContextProvider","children","reduceRight","memo","HTML_UPDATE_AVAILABLE","registerSW","VALID_SERVICE_WORKER_ENVIRONMENT","navigator","serviceWorker","register","then","catch","window","console","warn","addEventListener","e","type","payload","data","handleMessageFromSW","Main","isMasked","rootClass","root_masked","pageClass","page_masked","page","useScrollLock","fallback","propTypes","process","handlers","registerMessageHandler","handler","unRegisterMessageHandler","filter","handlerfn","event","handlerList","forEach","sendMessageToSW","Promise","resolve","reject","channel","MessageChannel","port1","onmessage","error","close","controller","postMessage","port2","ReactPwaAdapter","store","dispatch","isRequired","getState","subscribe","App","markErrorHandled","renderError","unhandledErrors","handleIsOffline","useCallback","handleIsOnline","handleHTMLUpdate","async","handleError","id","loc","handleDismissError","ErrorIcon","talonProps","useApp","hasOverlay","handleCloseDrawer","setHTMLUpdateAvailable","useEffect","stack","array","Routes","ReactDOM","document","getElementById","app","setOnline","setOffline","AppContainer","ErrorBoundary","useErrorBoundary","errorApi","useErrorContext","rootReducer","combineReducers","reducers","createStore","enhancer","displayName","name","removeExistingTitleTags","titleTags","titleTag","parentNode","removeChild","ReactPwaHeadProvider","titleTagsToRemove","getElementsByTagName","useMemo","constructor","super","state"],"mappings":"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","file":"client.39caf687a75ba1a52f93.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classify from '../../classify';\nimport defaultClasses from './mask.scss';\n\n/**\n * A component that masks content.\n *\n * @class Mask\n * @extends {Component}\n *\n * @typedef Mask\n * @kind class component\n *\n * @returns {React.Element} A React component that will mask content.\n */\nclass Mask extends Component {\n    \n    static propTypes = {\n        classes: PropTypes.shape({\n            root: PropTypes.string,\n            root_active: PropTypes.string\n        }),\n        dismiss: PropTypes.func,\n        isActive: PropTypes.bool\n    };\n\n    render() {\n        const { classes, dismiss, isActive } = this.props;\n        const className = isActive ? classes.root_active : classes.root;\n\n        return <button className={className} onClick={dismiss} />;\n    }\n}\n\nexport default classify(defaultClasses)(Mask);\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".root{background-color:#000;cursor:pointer;display:block;height:100%;left:0;opacity:0;position:fixed;top:0;transition-duration:192ms;transition-property:opacity,visibility;transition-timing-function:linear;visibility:hidden;width:100%;z-index:2;-webkit-appearance:none}.root_active{composes:root;opacity:.5;transition-duration:224ms;visibility:visible}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/postcss-loader/src/index.js??ref--5-2!../node_modules/sass-loader/dist/cjs.js!./index.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".root{background-color:rgb(var(--venia-background-color));color:rgb(var(--venia-text));position:relative;z-index:1}.root_masked{composes:root}.page{min-height:calc(100vh - 77px);padding-top:77px}.page_home{min-height:calc(220vh - 77px)}.page_masked{composes:page}@media(max-width: 1023px){.page{padding-top:60px}}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React, { Component } from 'react';\n\nimport getDisplayName from './util/getDisplayName';\n\nexport const mergeClasses = (...args) => Object.assign({}, ...args);\n\nconst classify = defaultClasses => WrappedComponent =>\n    class extends Component {\n        static displayName = `Classify(${getDisplayName(WrappedComponent)})`;\n\n        render() {\n            const { className, classes, ...restProps } = this.props;\n            const classNameAsObject = className ? { root: className } : null;\n            const finalClasses = mergeClasses(\n                defaultClasses,\n                classNameAsObject,\n                classes\n            );\n\n            return <WrappedComponent {...restProps} classes={finalClasses} />;\n        }\n    };\n\nexport default classify;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js??ref--5-2!../../../node_modules/sass-loader/dist/cjs.js!./main.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import React from 'react';\nimport {\n  AdapterContextProvider as Adapters,\n  WindowSizeContextProvider\n} from '@react_pwa/adapter';\n\n/**\n * My custom context\n */\n\n\n/**\n * \n *\n * @property {React.Component[]} contextProviders\n */\nconst contextProviders = [\n  Adapters,\n  WindowSizeContextProvider\n];\n\nconst ContextProvider = ({ children }) => {\n  return contextProviders.reduceRight((memo, ContextProvider) => {\n    return <ContextProvider>{memo}</ContextProvider>;\n  }, children);\n};\n\nexport default ContextProvider;\n","export const HTML_UPDATE_AVAILABLE = 'HTML_UPDATE_AVAILABLE';\nexport const PREFETCH_IMAGES = 'PREFETCH_IMAGES';\n","import {\n    VALID_SERVICE_WORKER_ENVIRONMENT,\n    handleMessageFromSW\n} from './util/swUtils';\n\n\nexport const registerSW = () => {\n    if (VALID_SERVICE_WORKER_ENVIRONMENT) {\n        // firebase.initializeApp({\n        //     messagingSenderId: \"647542779952\"\n        //   });\n\n        navigator.serviceWorker\n            .register('/sw.js')\n            .then(() => {\n\n               \n            })\n            .catch(() => {\n                /**\n                 * console.* statements are removed by webpack\n                 * in production mode. window.console.* are not.\n                 */\n                window.console.warn('Failed to register SW.');\n            });\n\n        navigator.serviceWorker.addEventListener('message', e => {\n            const { type, payload } = e.data;\n            handleMessageFromSW(type, payload, e);\n        });\n    }\n};\n","import React, { Suspense, lazy } from 'react';\nimport { bool, shape, string } from 'prop-types';\nimport { useScrollLock } from '@react_pwa/adapter';\nimport { mergeClasses } from '../../classify';\n// const Header = lazy(() => import('../Header'));\n// const Footer = lazy(() => import('../Footer'));\nimport defaultClasses from './main.scss';\n\nconst Main = props => {\n    const { children, isMasked } = props;\n    const classes = mergeClasses(defaultClasses, props.classes);\n\n    const rootClass = isMasked ? classes.root_masked : classes.root;\n    const pageClass = isMasked ? classes.page_masked : classes.page;\n\n    useScrollLock(isMasked);\n\n    return (\n        <Suspense fallback={null}>\n            <main className={rootClass}>\n                {/* <Header /> */}\n                <div className={pageClass}>{children}</div>\n                {/* <Footer /> */}\n            </main>\n        </Suspense>\n    );\n};\n\nexport default Main;\n\nMain.propTypes = {\n    classes: shape({\n        page: string,\n        page_masked: string,\n        root: string,\n        root_masked: string\n    }),\n    isMasked: bool\n};\n","/**\n * process.env.DEV_SERVER_SERVICE_WORKER_ENABLED is\n * a string representation of a boolean value\n */\nexport const VALID_SERVICE_WORKER_ENVIRONMENT =\n    process.env.NODE_ENV === 'production' ||\n    process.env.DEV_SERVER_SERVICE_WORKER_ENABLED === 'true';\n\n/**\n * handlers is an object that holds all the message\n * handlers for the service worker messages. Key is the\n * type of the message and value is an array of handlers.\n *\n * When a message arrives from the service worker, the\n * message's type will be used to get the list of handlers\n * that need to be invoked from the handlers object.\n */\nconst handlers = {};\n\n/**\n *\n * registerMessageHandler is a SW Util that registers a\n * handler for a given message type in the handlers object.\n *\n * handler is a function that bears this signature:\n *\n * (payload: Object, event: MessageEvent) => void\n *\n * @param {string} type type of the message to register a handler\n * @param {function} handler reference of the function to register as handler\n *\n * @returns {function} a function that when called will unregister\n * the handler from the handlers object.\n */\nexport const registerMessageHandler = (type, handler) => {\n    if (!handlers[type]) {\n        handlers[type] = [];\n    }\n    handlers[type].push(handler);\n    return () => unRegisterMessageHandler(type, handler);\n};\n\n/**\n * unRegisterMessageHandler is a SW util that will un register\n * a handler for a given message type in the handlers object.\n *\n * The handler function provided here should be the exact function\n * that was used to register in the first place.\n *\n * @param {string} type type of the message handler to unregister\n * @param {function} handler reference of the handler to unregister\n *\n * @returns {void}\n */\nexport const unRegisterMessageHandler = (type, handler) => {\n    if (handlers[type]) {\n        handlers[type] = handlers[type].filter(\n            handlerfn => handler !== handlerfn\n        );\n    }\n};\n\n/**\n *\n * handleMessageFromSW handles messages from the SW. It matches\n * the message with the handler in the handlers object and delegates\n * the message payload along with the MessageEvent to the handler.\n *\n * @param {string} type type of the message from the SW\n * @param {object} payload payload of the message from the SW\n * @param {MessageEvent} event MessageEvent of the message from the SW\n *\n * @returns {void}\n */\nexport const handleMessageFromSW = (type, payload, event) => {\n    const handlerList = handlers[type];\n    if (handlerList) {\n        handlerList.forEach(handler => {\n            handler(payload, event);\n        });\n    }\n};\n\n/**\n *\n * sendMessageToSW sends a message to the SW. It constructs the message\n * with the type and payload provided as arguments and wraps them in a\n * promise that will be returned to the caller. If the SW responds to the\n * message, the promise will resolve with that response.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\n *\n * @param {string} type type of the message to be sent to the SW\n * @param {object} payload payload of the message to be sent to the SW\n *\n * @returns {Promise} promise that will resolve to the reply from the SW\n */\nexport const sendMessageToSW = (type, payload) =>\n    new Promise((resolve, reject) => {\n        const channel = new MessageChannel();\n\n        /**\n         * channel.port1 is the port for the channel creator to use\n         * to send a message to the receiver.\n         *\n         * channel.port2 is the port for the message received to use\n         * to communicate to the channel creator.\n         */\n\n        // Listening for a reply from the SW\n        channel.port1.onmessage = event => {\n            if (event.data.error) {\n                reject(event.data.error);\n            } else {\n                resolve(event.data);\n            }\n            channel.port1.close();\n        };\n\n        if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({ type, payload }, [\n                channel.port2\n            ]);\n        } else {\n            reject('SW Not Registered');\n            channel.port1.close();\n        }\n    });\n","import React, { useMemo } from 'react';\nimport { func, shape, string } from 'prop-types';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst ReactPwaAdapter = props => {\n    const { children, store } = props;\n\n\n    return (\n        <ReduxProvider store={store}>\n            <BrowserRouter>{children}</BrowserRouter>\n        </ReduxProvider>\n    );\n};\n\n\n\nReactPwaAdapter.propTypes = {\n    store: shape({\n        dispatch: func.isRequired,\n        getState: func.isRequired,\n        subscribe: func.isRequired\n    }).isRequired\n};\n\nexport default ReactPwaAdapter;\n","import React, { useCallback, useEffect, Suspense, lazy } from 'react';\nimport { array, func, shape, string } from 'prop-types';\nimport { useApp } from '@react_pwa/adapter/talons/App/useApp';\nimport { HeadProvider, Title } from '../Head';\nimport Main from '../Main';\nimport Mask from '../Mask';\nimport Routes from '../Routes';\nimport { registerMessageHandler } from '../../util/swUtils';\nimport { HTML_UPDATE_AVAILABLE } from '../../constants/swMessageTypes';\n\nconst ERROR_MESSAGE = 'Sorry! An unexpected error occurred.';\n\nconst App = props => {\n    const { markErrorHandled, renderError, unhandledErrors } = props;\n\n\n    const handleIsOffline = useCallback(() => {\n       \n    }, []);\n\n    const handleIsOnline = useCallback(() => {\n       \n    }, []);\n\n    const handleHTMLUpdate = useCallback(\n        async resetHTMLUpdateAvaiableFlag => {\n\n        },\n        []\n    );\n\n    const handleError = useCallback(\n        (error, id, loc, handleDismissError) => {\n            const errorToastProps = {\n                icon: ErrorIcon,\n                message: `${ERROR_MESSAGE}\\nDebug: ${id} ${loc}`,\n                onDismiss: remove => {\n                    handleDismissError();\n                    remove();\n                },\n                timeout: 15000,\n                type: 'error'\n            };\n            //localStorage.clear();\n        },\n        []\n    );\n\n    const talonProps = useApp({\n        handleError,\n        handleIsOffline,\n        handleIsOnline,\n        handleHTMLUpdate,\n        markErrorHandled,\n        renderError,\n        unhandledErrors\n    });\n\n    const {\n        hasOverlay,\n        handleCloseDrawer,\n        setHTMLUpdateAvailable,\n    } = talonProps;\n\n    useEffect(() => {\n        const unregisterHandler = registerMessageHandler(\n            HTML_UPDATE_AVAILABLE,\n            () => {\n                setHTMLUpdateAvailable(true);\n            }\n        );\n        return unregisterHandler;\n    }, [setHTMLUpdateAvailable]);\n\n\n\n    if (renderError) {\n        return (\n            <HeadProvider>\n                <Title>{`${PWA_NAME}`}</Title>\n                <Main isMasked={true} />\n                <Mask isActive={true} />\n                {/* <ToastContainer /> */}\n            </HeadProvider>\n        );\n    }\n\n    return (\n        <HeadProvider>\n            <Title>{`${PWA_NAME}`}</Title>\n            <Main isMasked={hasOverlay}>\n                <Routes />\n            </Main>\n            <Mask isActive={hasOverlay} dismiss={handleCloseDrawer} />\n        </HeadProvider>\n    );\n};\n\nApp.propTypes = {\n    markErrorHandled: func.isRequired,\n    renderError: shape({\n        stack: string\n    }),\n    unhandledErrors: array\n};\n\nexport default App;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js??ref--5-2!../../../node_modules/sass-loader/dist/cjs.js!./mask.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n\n\nconst Routes = () => {\n    return (\n        <Suspense fallback={null}>\n            <Switch>\n                {/* <Route exact path=\"/search.html\">\n                    <Search />\n                </Route> */}\n               \n            </Switch>\n        </Suspense>\n    );\n};\n\nexport default Routes;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Adapter } from './drivers';\nimport store from './store';\nimport app from '@react_pwa/adapter/store/actions/app';\nimport App, { AppContextProvider } from './components/App';\n\nimport { registerSW } from './registerSW';\nimport './index.scss'\n\nReactDOM.render(\n    <Adapter store={store}>\n        <AppContextProvider>\n            <App />\n        </AppContextProvider>\n    </Adapter>,\n    document.getElementById('container')\n);\n\nregisterSW();\n\nwindow.addEventListener('online', () => {\n    store.dispatch(app.setOnline());\n});\nwindow.addEventListener('offline', () => {\n    store.dispatch(app.setOffline());\n});\n\nif (module.hot) {\n    // When any of the dependencies to this entry file change we should hot reload.\n    module.hot.accept();\n}\n","import React from 'react';\nimport { useErrorContext } from '@react_pwa/adapter/context/unhandledErrors';\n\nimport App from './app';\nimport { useErrorBoundary } from './useErrorBoundary';\n\nconst AppContainer = () => {\n    const ErrorBoundary = useErrorBoundary(App);\n    const [unhandledErrors, errorApi] = useErrorContext();\n\n    return <ErrorBoundary unhandledErrors={unhandledErrors} {...errorApi} />;\n};\n\nexport default AppContainer;\n","import { combineReducers, createStore } from 'redux';\nimport { enhancer, reducers } from '@react_pwa/adapter';\n// This is the connective layer between the Peregrine store and the\n// venia-concept UI. You can add your own reducers/enhancers here and combine\n// them with the Peregrine exports.\n//\n// example:\n// const rootReducer = combineReducers({ ...reducers, ...myReducers });\n// const rootEnhancer = composeEnhancers(enhancer, myEnhancer);\n// export default createStore(rootReducer, rootEnhancer);\nconst rootReducer = combineReducers({ ...reducers });\n//const rootReducer = combineReducers(reducers);\n\n// \"start\": \"webpack-dev-server --open --mode development\",\n\nexport default createStore(rootReducer, enhancer);\n","const getDisplayName = WrappedComponent => {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n};\n\nexport default getDisplayName;\n","import React, { useEffect } from 'react';\nimport { HeadProvider } from 'react-head';\n\nconst removeExistingTitleTags = titleTags => {\n    titleTags.forEach(titleTag => {\n        if (titleTag) titleTag.parentNode.removeChild(titleTag);\n    });\n};\n\nconst ReactPwaHeadProvider = props => {\n    useEffect(() => {\n        const titleTagsToRemove = document.getElementsByTagName('title');\n        removeExistingTitleTags([...titleTagsToRemove]);\n    }, []);\n\n    return <HeadProvider>{props.children}</HeadProvider>;\n};\n\nexport default ReactPwaHeadProvider;\n","import React, { Component, useMemo } from 'react';\n\nexport const useErrorBoundary = WrappedComponent =>\n    useMemo(\n        () =>\n            class ErrorBoundary extends Component {\n                constructor(props) {\n                    super(props);\n\n                    this.state = { renderError: null };\n                }\n\n                static getDerivedStateFromError(renderError) {\n                    return { renderError };\n                }\n\n                render() {\n                    const { props, state } = this;\n                    const { renderError } = state;\n\n                    return (\n                        <WrappedComponent\n                            {...props}\n                            renderError={renderError}\n                        />\n                    );\n                }\n            },\n        []\n    );\n"],"sourceRoot":""}